//	<서버와 포트>

//	서버 : 요청을 처리할 공간.

//	포트 : 서버로 들어갈수 있는 일종의 관문
//	 - 하나의 서버 안에서 각기 다른 서비스들이 원활하게 작동할수 있도록
//	   허용하는 관문.  
//	 - 기본적으로 사용하는 포트들이 있음 : 21, 80, 443
//	 - 회사라던지 유명한 s/w들의 포트번호 : 3306, 1521, 5432
//	 - 사용자들이 마음껏 지정하는 커스텀 포트번호도 존재.
//
	<포트가 꼭 필요해요?>

//	포트설명을 쉽게 하기위해 준비해온 이야기
//	 - 누렁이의 포트 대탐험 (서버 성의 비밀통로)
//	 - 서버의 위치(IP 주소)를 안다고 아무나 들여보내면 안된다. 
//	 - 포트는 서버의 위치에서도 서버가 입장을 허락한 공간
//	   (만약 어떤문으로 들어와야하는지 모른다면 영원히 성벽 주위만 맴돌게 될것)


	<포트가 한군데만 뚫려있다면?>
//	(1000마리의 강아지가 사는 아파트가 있는데 현관문이 단 1개라면?)
//	 - 모두가 하나의 현관문으로 들어와서 방문객들이 찾아오거나 너무 복잡한경우는
//	   길을 잃을수도 있음.
//	 - 포트를 비유하자면 하나의 서버 내부에서는 수많은 프로그램들이 각자의 집에서
//	   손님을 기다리고 있다 비유할수 있음.
//	 - 입구가 하나였다 가정 서버는 데이터좀 달라는 요청이 온다면 어느 포트에 요청해야할까?


<포트 번호의 비밀 - 게이트의 종류와 규칙>
//	 - 포트 자체는 눈에 보이는 개념은 아님 숫자로 된 약속(프로토콜)일뿐

//	1. 모두에게 잘 알려진 포트(0~1023) 
//	 - 이 번호는 이 서비스 전용이라 선언되어있는 약속된 유명한 문들.
//	   (다른용도로 사용하면 큰 혼란을 발생시킬수 있음)
	 
//	 21 (FTP) : 파일이 드나드는 포트.
//	 22 (SSH) : 암호만 안다면 드나드는 비밀 통로(원격 접속)
//	 53 (DNS) : 도메인(주소)을 IP 주소로 바꿔주는 주소 안내소.
//	 80 (HTTP) : 표준 정문.(암호화x)
//	 110 (POP3) : 우체국에서 편지를 찾아가는 창구. 
//	  - POP3(Post Office Protocol Version3)
//	    이메일 서버에서 클라이언트로 이메일을 다운로드하여 로컬 컴퓨터에
//	    저장하는데 사용.(Outlook)
//	 443 (HTTPS) : 암호화된 비밀정문.(암호화된 웹사이트)
//	 
//	 2. 등록된 포트 : 1024 ~ 49151
//	  - 유명 프렌차이즈 생각하면 편함. 
//	  1521, 3306, 5432, 6379(Redis), 8080(웹 서비스용 임시 게이트)
  
//	 3. 사설 포트(49152 ~ 65535)
//	  - 서버에 방문하는 유저들이 잠깐 사용하는 임시 경로.
//	  - 예를들어 우리가 www.google.com에 요청을 했다 치면 443번 포트로 검색해줘!
//	    라는 요청이 들어갔다 가정. 
//	    (사용자의 컴퓨터는 구글에서 오는 답장은 내 컴퓨터의 51234반 문으로 응답해줘 라고
//	     임시 포트를 함께 알려주는 작업이 진행)
//	  - 그 덕에 구글 서버는 수많은 요청이 와도 정확하게 사용자의 컴퓨터와 사용자의
//	    브라우저 에게 응답을 진행할수 있게됨.



//	localhost : this랑 비슷(자기 자신을 지칭하는 특별한주소)
//	 - 127.0.0.1 


	<서버의 분리.(한지붕의 두 가게)>
//	 - Front쪽에서(UI에서 / 5173) Back쪽으로(Server / 8080)쪽으로 요청을 보낸다했을때
//	   (5173번 포트에서 8080번 포트로 요청을 할때 보안정책상 8080에서 cut 할수 있음)
//	    -> 5173번에서 오는 요청은 믿을만 하니 통과시키라는 보안정책을 수립.
//	       (5173번은 미리 허락해두라)


	<방화벽 - 누렁이 그자체>
//	 - 각 포트를 지키면서 허락된 요청만 통과시키는 역할을 진행.
//	 - 처음에 서버가 오픈이되면 이 성은 오직 구경만 허용한다!
//	   (80, 443)외에는 다른 낯선이들은 일단 짖고봄. 
//	 - 방화벽은 불필요한 포트는 닫아둔체로 외부의 공격을 막는 중요한 보안장치.


<포트 관련 이슈>

//	1. Port already in use : 이미 사용중인 포트다!
//	   -> 같은 포트를 사용중인 프로그램을 종료
//	   -> 포트 변경
//
//	2. Connection refused : 연결 거부.
//	   -> 가게문이 안열렸거나 잘못찾아갔을때. 
//	      (포트번호를 잘못알고 있거나 혹은 서버가 안열렸을때)
//
//	3. Connection Timed out : 응답 없음.
//	   -> 한참을 기다려도 아무도 문을 열어주지 않고 내용도 그대로 가져온 경우.
//	      (투명인간 취급 당한거임)
//	   -> 방화벽에서 막혀있는 경우가 대부분.
//	      (포트 요청 통과 시켜달라고 규칙을 추가)

<API 설계>
//	 - 코딩기술이 아님. 컴퓨터 세계의 질서를 이해하는 철학. 
//
//	API(Application Programming Interface)
//	 - 서로 다른 소프트웨어 간의 상호작용을 가능하게 해주는 일종의 규칙, 인터페이스
//	 - API는 두 시스템 간의 데이터를 주고받는 방법을 정의
//	   (GET, POST)
//
//	REST API, RESTful API
//	 - REST 규칙이라는 개념이 있음.
//	   REST 규칙을 준수하면 그것을 RESTful API 라고 부름.
